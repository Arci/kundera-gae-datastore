package it.polimi.client.datastore.crud;

import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import com.impetus.kundera.KunderaException;
import it.polimi.client.datastore.entities.*;
import org.junit.*;
import org.junit.rules.ExpectedException;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

/**
 * @author Fabio Arcidiacono.
 */
public class IdsTest {

    private LocalDatastoreServiceTestConfig datastoreConfig = new LocalDatastoreServiceTestConfig();
    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(datastoreConfig);
    private static final String PERSISTENCE_UNIT = "pu";
    private EntityManagerFactory emf;
    private EntityManager em;

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Before
    public void setUp() {
        helper.setUp();
        emf = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
        if (em != null && em.isOpen()) {
            em.close();
        }
        em = emf.createEntityManager();
    }

    @After
    public void tearDown() {
        em.close();
        emf.close();
        helper.tearDown();
    }

    @Test
    public void AutoGeneratedIdTest() {
        print("auto generated id");
        Phone phone = new Phone();
        phone.setNumber(123456789L);
        em.persist(phone);
        Assert.assertNotNull(phone.getId());

        String phnId = phone.getId();
        clear();

        print("read");
        Phone foundPhone = em.find(Phone.class, phnId);
        Assert.assertNotNull(foundPhone);
        Assert.assertEquals(phnId, foundPhone.getId());
        Assert.assertEquals((Long) 123456789L, foundPhone.getNumber());

        print("update");
        foundPhone.setNumber(987654321L);
        em.merge(foundPhone);

        clear();

        TypedQuery<Phone> query = em.createQuery("SELECT p FROM Phone p WHERE p.id = :id", Phone.class);
        foundPhone = query.setParameter("id", phnId).getSingleResult();
        Assert.assertNotNull(foundPhone);
        Assert.assertEquals(phnId, foundPhone.getId());
        Assert.assertEquals((Long) 987654321L, foundPhone.getNumber());

        print("delete");
        em.remove(foundPhone);
        foundPhone = em.find(Phone.class, phnId);
        Assert.assertNull(foundPhone);
    }

    @Test
    public void UserStringIdTest() {
        print("user string id");
        PhoneString phone = new PhoneString();
        phone.setNumber(123456789L);
        phone.setId("phone 1");
        em.persist(phone);
        Assert.assertNotNull(phone.getId());
        Assert.assertEquals("phone 1", phone.getId());

        clear();

        print("read");
        PhoneString foundPhone = em.find(PhoneString.class, "phone 1");
        Assert.assertNotNull(foundPhone);
        Assert.assertEquals("phone 1", foundPhone.getId());
        Assert.assertEquals((Long) 123456789L, foundPhone.getNumber());

        print("update");
        foundPhone.setNumber(987654321L);
        em.merge(foundPhone);

        clear();

        TypedQuery<PhoneString> query = em.createQuery("SELECT p FROM PhoneString p WHERE p.id = :id", PhoneString.class);
        foundPhone = query.setParameter("id", "phone 1").getSingleResult();
        Assert.assertNotNull(foundPhone);
        Assert.assertEquals("phone 1", foundPhone.getId());
        Assert.assertEquals((Long) 987654321L, foundPhone.getNumber());

        print("delete");
        em.remove(foundPhone);
        foundPhone = em.find(PhoneString.class, "phone 1");
        Assert.assertNull(foundPhone);
    }

    @Test
    public void UserLongIdTest() {
        print("user long id");
        PhoneLong phone = new PhoneLong();
        phone.setNumber(123456789L);
        phone.setId(1L);
        em.persist(phone);
        Assert.assertNotNull(phone.getId());
        Assert.assertEquals((Long) 1L, phone.getId());

        clear();

        print("read");
        PhoneLong foundPhone = em.find(PhoneLong.class, 1L);
        Assert.assertNotNull(foundPhone);
        Assert.assertEquals((Long) 1L, foundPhone.getId());
        Assert.assertEquals((Long) 123456789L, foundPhone.getNumber());

        print("update");
        foundPhone.setNumber(987654321L);
        em.merge(foundPhone);

        clear();

        TypedQuery<PhoneLong> query = em.createQuery("SELECT p FROM PhoneLong p WHERE p.id = :id", PhoneLong.class);
        foundPhone = query.setParameter("id", 1L).getSingleResult();
        Assert.assertNotNull(foundPhone);
        Assert.assertEquals((Long) 1L, foundPhone.getId());
        Assert.assertEquals((Long) 987654321L, foundPhone.getNumber());

        print("delete");
        em.remove(foundPhone);
        foundPhone = em.find(PhoneLong.class, 1L);
        Assert.assertNull(foundPhone);
    }

    @Test
    public void InvalidIdTypeTest() {
        print("invalid double id");
        PhoneInvalid1 phone = new PhoneInvalid1();
        phone.setNumber(123456789L);
        phone.setId(1D);
        thrown.expect(KunderaException.class);
        em.persist(phone);
    }

    @Test
    public void InvalidAutoGeneratedIdTypeTest() {
        print("invalid auto generated id");
        PhoneInvalid2 phone = new PhoneInvalid2();
        phone.setNumber(123456789L);
        phone.setId(1D);
        thrown.expect(KunderaException.class);
        em.persist(phone);
    }

    private void clear() {
        em.clear();
        print("clear entity manager");
    }

    private void print(String message) {
        String delimiter = "-------------------------------------------------------";
        String spacing = message.length() < 10 ? "\t\t\t\t\t\t" : message.length() < 20 ? "\t\t\t\t\t" : "\t\t\t\t";
        System.out.println(delimiter + "\n" + spacing + message.toUpperCase() + "\n" + delimiter);
    }
}
